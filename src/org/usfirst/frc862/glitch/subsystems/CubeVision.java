// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.subsystems;

import java.util.ArrayList;

import org.usfirst.frc862.glitch.vision.CubeNotFoundException;
import org.usfirst.frc862.glitch.vision.PowerCube;

import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class CubeVision extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	private final int VISION_ABORT_THRESHOLD = 4; //If a cube hasn't been seen for this many frames, stop sending the last good frame and send an abort message
	
	private int framesSinceContact;
	private int lastGoodFrameNum;
	private SerialPort serialIn;
	private ArrayList<PowerCube> cubes;
	
	public CubeVision() {
		super();
		cubes = new ArrayList();
		serialIn = new SerialPort(115200, SerialPort.Port.kUSB);
		serialIn.writeString("streamon\n");
		serialIn.enableTermination();
		framesSinceContact = 0;
		
	}

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	/*
    	 * Example input
    	 * Frame:378378, Process Time:23.0 fps, 108.4% CPU, 34C, 1344 MHz, Objects:1
		 * Object:0[x:240,y:191,w:93,h:114
    	 */
    	
    	//TODO enable termination and setup collection loop
    	String inData = serialIn.readString();
    	SmartDashboard.putString("dataIn", inData);
    	String lastFrame = inData.substring(inData.lastIndexOf("Frame"));
    	int frameNum = Integer.parseInt(lastFrame.substring(lastFrame.indexOf("Frame:") + 1, lastFrame.indexOf(",")));
    	int numObjects = Integer.parseInt(lastFrame.substring(lastFrame.indexOf("Objects:") + 1, lastFrame.indexOf("\n")));
    	if(numObjects > 0) {
    		framesSinceContact = 0;
    		String currentCube;
    		for(int i = 0; i < numObjects; i++) {
    			currentCube = lastFrame.substring(lastFrame.indexOf("Object:" + i + "["));
    			int x, y, w, h;
    			x = Integer.parseInt(currentCube.substring(currentCube.indexOf("x:") + 1, currentCube.indexOf(",", currentCube.indexOf("x:"))));
    			y = Integer.parseInt(currentCube.substring(currentCube.indexOf("y:") + 1, currentCube.indexOf(",", currentCube.indexOf("y:"))));
    			w = Integer.parseInt(currentCube.substring(currentCube.indexOf("w:") + 1, currentCube.indexOf(",", currentCube.indexOf("w:"))));
    			h = Integer.parseInt(currentCube.substring(currentCube.indexOf("h:") + 1, currentCube.indexOf("\n", currentCube.indexOf("h:"))));
    			
    			cubes.add(new PowerCube(x, y, w, h));
    		}
    		lastGoodFrameNum = frameNum;
    	}
    	else {
    		framesSinceContact = frameNum - lastGoodFrameNum;
    	}

    }
    
    /**
     * 
     * @return double[] {angle (degrees), area (pixels)}
     * @throws CubeNotFoundException throws if no cubes have been identified for a number of frames and contains the number of frames since contact for logging
     */
    public double[] getBestCube() throws CubeNotFoundException {
    	if(framesSinceContact > VISION_ABORT_THRESHOLD) throw new CubeNotFoundException(framesSinceContact);
    	if(cubes.size() == 0) throw new CubeNotFoundException();
    	
    	double[] vals = {0.0, 0.0};
    	double smallestAngle = Math.abs(cubes.get(0).getAngle());
    	int bestCubeIndex = 0;
    	for(int i = 1; i < cubes.size(); i++) {
    		if(Math.abs(cubes.get(i).getAngle()) < smallestAngle) {
    			bestCubeIndex = i;
    			smallestAngle = Math.abs(cubes.get(i).getAngle());
    		}
    	}
    	vals[0] = smallestAngle;
    	vals[1] = cubes.get(bestCubeIndex).getArea();
    	
    	return vals;
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    

}

