// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc862.glitch.commands;
import com.team254.lib.util.CheesyDriveHelper;
import com.team254.lib.util.DriveSignal;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc862.glitch.Robot;
import org.usfirst.frc862.util.LightningMath;

/**
 *
 */
public class Arcade extends Command {
    private final CheesyDriveHelper drive;
    private boolean straighten = false;
    private double heading = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Arcade() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        drive = new CheesyDriveHelper();
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.driveTrain.setVoltageMode();
        straighten = false;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
//        double left= Robot.oi.getThrust();
//        double right = Robot.oi.getThrust();
//        left-=Robot.oi.getRotation();
//        right+=Robot.oi.getRotation();
//        left= LightningMath.limit(left,-1,1);
//        right = LightningMath.limit(right,-1,1);
//        Robot.driveTrain.setPower(left,right);

        double rot = Robot.oi.getRotation();
        boolean quickTurn = Robot.oi.getQuickTurn();

        if (rot < 0.1) {
            rot = 0;
            if (!straighten) {
                heading = Robot.core.getGyroAngle();
                straighten = true;
            }
        } else {
            straighten = false;
            rot = rot * rot * rot;
        }

        if (straighten) {
           double err = LightningMath.boundThetaNeg180to180(Robot.core.getGyroAngle() - heading);
            SmartDashboard.putNumber("Theta Error", err);
            rot = err * -0.01;
            SmartDashboard.putNumber("Theta Correct", rot);
            quickTurn = true;
        }

        DriveSignal power = drive.cheesyDrive(Robot.oi.getThrust(), rot, quickTurn, Robot.shifter.isHighGear());
        Robot.driveTrain.setPower(power);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
